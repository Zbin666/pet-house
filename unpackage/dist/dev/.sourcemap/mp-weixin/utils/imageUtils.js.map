{"version":3,"file":"imageUtils.js","sources":["utils/imageUtils.js"],"sourcesContent":["/**\n * 图片处理工具类\n * 统一处理网络图片的下载、缓存和显示\n */\n\n// 全局图片缓存\nconst imageCaches = {\n  avatar: new Map(),      // 用户头像缓存\n  petAvatar: new Map(),   // 宠物头像缓存\n  photo: new Map(),       // 照片缓存\n  image: new Map()        // 通用图片缓存\n}\n\n// 更新触发器\nconst updateTriggers = {\n  avatar: 0,\n  petAvatar: 0,\n  photo: 0,\n  image: 0\n}\n\n/**\n * 规范化图片URL\n * @param {string} url 原始URL\n * @returns {string} 规范化后的URL\n */\nfunction normalizeImageUrl(url) {\n  if (!url) return ''\n  \n  let normalized = url\n  \n  // 1. 相对路径转绝对路径\n  if (normalized.startsWith('/uploads/')) {\n    normalized = `https://pet-api.zbinli.cn${normalized}`\n  }\n  \n  // 2. HTTP 转 HTTPS\n  if (normalized.startsWith('http://pet-api.zbinli.cn')) {\n    normalized = normalized.replace('http://pet-api.zbinli.cn', 'https://pet-api.zbinli.cn')\n  }\n  \n  // 3. 移除端口号\n  normalized = normalized.replace('://pet-api.zbinli.cn:80', '://pet-api.zbinli.cn')\n  \n  return normalized\n}\n\n/**\n * 获取图片的可显示src\n * @param {string} url 图片URL\n * @param {string} type 图片类型 (avatar, petAvatar, photo, image)\n * @param {string} defaultSrc 默认图片路径\n * @param {Function} updateCallback 更新回调函数\n * @returns {string} 可显示的图片src\n */\nfunction getImageSrcInternal(url, type = 'image', defaultSrc = '/static/logo.png', updateCallback = null) {\n  if (!url) return defaultSrc\n  \n  const normalized = normalizeImageUrl(url)\n  \n  // 本地或静态路径直接返回\n  if (normalized.startsWith('wxfile://') || normalized.startsWith('/static/')) {\n    return normalized\n  }\n  \n  // 检查缓存\n  const cache = imageCaches[type]\n  if (cache && cache.has(normalized)) {\n    return cache.get(normalized)\n  }\n  \n  // 下载网络图片到本地\n  uni.downloadFile({\n    url: normalized,\n    success: (res) => {\n      if (res.statusCode === 200 && res.tempFilePath) {\n        if (cache) cache.set(normalized, res.tempFilePath)\n        // 触发更新\n        if (updateCallback) {\n          updateCallback()\n        }\n      } else {\n        if (cache) cache.set(normalized, defaultSrc)\n        if (updateCallback) {\n          updateCallback()\n        }\n      }\n    },\n    fail: (err) => {\n      console.error(`图片下载失败 (${type}):`, normalized, err)\n      if (cache) cache.set(normalized, defaultSrc)\n      if (updateCallback) {\n        updateCallback()\n      }\n    }\n  })\n  \n  // 返回默认图片，下载完成后会自动更新\n  return defaultSrc\n}\n\n/**\n * 获取头像src（通用）\n * @param {string} url 头像URL\n * @param {Function} updateCallback 更新回调函数\n * @returns {string} 可显示的头像src\n */\nexport function getAvatarSrc(url, updateCallback = null) {\n  return getImageSrcInternal(url, 'avatar', '/static/index/add.png', updateCallback)\n}\n\n/**\n * 获取用户头像src\n * @param {string} url 头像URL\n * @param {Function} updateCallback 更新回调函数\n * @returns {string} 可显示的头像src\n */\nexport function getUserAvatarSrc(url, updateCallback = null) {\n  return getImageSrcInternal(url, 'avatar', '/static/user/user.png', updateCallback)\n}\n\n/**\n * 获取宠物头像src\n * @param {string} url 头像URL\n * @param {Function} updateCallback 更新回调函数\n * @returns {string} 可显示的头像src\n */\nexport function getPetAvatarSrc(url, updateCallback = null) {\n  return getImageSrcInternal(url, 'petAvatar', '/static/logo.png', updateCallback)\n}\n\n/**\n * 获取照片src\n * @param {string} url 照片URL\n * @param {Function} updateCallback 更新回调函数\n * @returns {string} 可显示的照片src\n */\nexport function getPhotoSrc(url, updateCallback = null) {\n  return getImageSrcInternal(url, 'photo', '/static/index/add.png', updateCallback)\n}\n\n/**\n * 获取通用图片src\n * @param {string} url 图片URL\n * @param {string} defaultSrc 默认图片路径\n * @param {Function} updateCallback 更新回调函数\n * @returns {string} 可显示的图片src\n */\nexport function getImageSrc(url, defaultSrc = '/static/404.png', updateCallback = null) {\n  return getImageSrcInternal(url, 'image', defaultSrc, updateCallback)\n}\n\n/**\n * 预览图片\n * @param {Array} images 图片URL数组\n * @param {number} current 当前图片索引\n */\nexport function previewImages(images, current = 0) {\n  if (!images || images.length === 0) return\n  \n  uni.previewImage({\n    current: current,\n    urls: images,\n    success: () => {\n      console.log('图片预览成功')\n    },\n    fail: (err) => {\n      console.error('图片预览失败:', err)\n      uni.showToast({\n        title: '图片预览失败',\n        icon: 'none'\n      })\n    }\n  })\n}\n\n/**\n * 清理指定类型的缓存\n * @param {string} type 缓存类型\n */\nexport function clearImageCache(type = null) {\n  if (type && imageCaches[type]) {\n    imageCaches[type].clear()\n  } else {\n    // 清理所有缓存\n    Object.values(imageCaches).forEach(cache => cache.clear())\n  }\n}\n\n/**\n * 获取缓存统计信息\n * @returns {Object} 缓存统计\n */\nexport function getCacheStats() {\n  const stats = {}\n  Object.keys(imageCaches).forEach(type => {\n    stats[type] = imageCaches[type].size\n  })\n  return stats\n}\n\n/**\n * 创建响应式更新触发器\n * @param {string} type 触发器类型\n * @returns {Object} 包含trigger和updateCallback的对象\n */\nexport function createUpdateTrigger(type) {\n  const trigger = ref(0)\n  \n  const updateCallback = () => {\n    trigger.value++\n  }\n  \n  return {\n    trigger,\n    updateCallback\n  }\n}\n"],"names":["uni"],"mappings":"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"}