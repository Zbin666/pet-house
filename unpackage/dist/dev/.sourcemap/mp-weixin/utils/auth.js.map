{"version":3,"file":"auth.js","sources":["utils/auth.js"],"sourcesContent":["// 用户认证相关工具函数\nimport { api } from './api.js'\n\n// 检查登录状态\nexport const checkLogin = () => {\n  const token = uni.getStorageSync('token')\n  const userInfo = uni.getStorageSync('userInfo')\n  \n  return {\n    isLoggedIn: !!token,\n    token,\n    userInfo\n  }\n}\n\n// 解析 JWT 并校验是否过期（客户端快速判断）\nexport const isTokenValid = (token) => {\n  if (!token || typeof token !== 'string') return false\n  const parts = token.split('.')\n  if (parts.length !== 3) return false\n  try {\n    const payload = JSON.parse(decodeURIComponent(escape(atob(parts[1]))))\n    if (!payload || !payload.exp) return false\n    const nowSec = Math.floor(Date.now() / 1000)\n    // 预留 60 秒容错\n    return payload.exp > (nowSec + 60)\n  } catch (_e) {\n    return false\n  }\n}\n\n// 微信登录 - 弹出微信账号选择页面\nexport const loginWithWeChat = () => {\n  return new Promise((resolve, reject) => {\n    // 检查是否已同意协议\n    const agreed = uni.getStorageSync('agreed')\n    if (!agreed) {\n      uni.showToast({\n        title: '请先同意用户协议',\n        icon: 'none'\n      })\n      return reject(new Error('请先同意用户协议'))\n    }\n    \n    // 使用微信授权登录，会弹出微信账号选择页面\n    uni.login({\n      provider: 'weixin',\n      success: async (loginRes) => {\n        try {\n          console.log('微信登录成功:', loginRes)\n          \n          // 获取用户信息 - 这里会弹出微信授权页面\n          const userInfoRes = await getUserProfile()\n          \n          // 调用后端登录接口\n          const result = await api.login({\n            code: loginRes.code,\n            nickname: userInfoRes.nickName,\n            avatarUrl: userInfoRes.avatarUrl\n          })\n          \n          // 保存登录信息\n          uni.setStorageSync('token', result.token)\n          uni.setStorageSync('userInfo', result.user)\n          \n          resolve(result)\n        } catch (error) {\n          console.error('微信登录失败:', error)\n          reject(error)\n        }\n      },\n      fail: (error) => {\n        console.error('微信登录失败:', error)\n        reject(error)\n      }\n    })\n  })\n}\n\n// 手机号登录\n// 手机号登录（通用：非微信端或无法使用 getPhoneNumber 时，使用模拟登录）\nexport const loginWithPhone = () => {\n  return new Promise(async (resolve, reject) => {\n    const agreed = uni.getStorageSync('agreed')\n    if (!agreed) {\n      uni.showToast({ title: '请先同意用户协议', icon: 'none' })\n      return reject(new Error('请先同意用户协议'))\n    }\n\n    try {\n      // 开发期模拟：实际项目应通过 getPhoneNumber 事件或短信验证码完成\n      const result = await api.login({\n        code: `phone_${Date.now()}`,\n        nickname: '手机用户',\n        avatarUrl: ''\n      })\n      uni.setStorageSync('token', result.token)\n      uni.setStorageSync('userInfo', result.user)\n      resolve(result)\n    } catch (error) {\n      console.error('手机号登录失败:', error)\n      reject(error)\n    }\n  })\n}\n\n// 微信小程序：通过按钮 open-type=\"getPhoneNumber\" 触发的事件进行登录\nexport const loginWithPhoneByEvent = (evt) => {\n  return new Promise(async (resolve, reject) => {\n    const agreed = uni.getStorageSync('agreed')\n    if (!agreed) {\n      uni.showToast({ title: '请先同意用户协议', icon: 'none' })\n      return reject(new Error('请先同意用户协议'))\n    }\n\n    try {\n      const detail = evt?.detail || {}\n      if (detail.errMsg && !detail.errMsg.includes('ok')) {\n        return reject(new Error('用户未授权获取手机号'))\n      }\n      // 开发阶段：不做解密与绑定，直接走模拟后端登录\n      const result = await api.login({\n        code: `phone_${Date.now()}`,\n        nickname: '手机用户',\n        avatarUrl: ''\n      })\n      uni.setStorageSync('token', result.token)\n      uni.setStorageSync('userInfo', result.user)\n      resolve(result)\n    } catch (error) {\n      console.error('手机号登录失败:', error)\n      reject(error)\n    }\n  })\n}\n\n// 获取用户信息 - 会弹出微信授权页面\nexport const getUserProfile = () => {\n  return new Promise((resolve, reject) => {\n    uni.getUserProfile({\n      desc: '用于完善用户资料', // 声明获取用户个人信息后的用途\n      success: (res) => {\n        console.log('获取用户信息成功:', res)\n        resolve(res.userInfo)\n      },\n      fail: (error) => {\n        console.error('获取用户信息失败:', error)\n        reject(error)\n      }\n    })\n  })\n}\n\n// 获取用户信息 - 旧版本API（兼容性）\nexport const getUserInfo = () => {\n  return new Promise((resolve, reject) => {\n    uni.getUserInfo({\n      success: (res) => {\n        resolve(res.userInfo)\n      },\n      fail: (error) => {\n        reject(error)\n      }\n    })\n  })\n}\n\n// 退出登录\nexport const logout = () => {\n  // 保存用户基本信息（头像和昵称）用于下次静默登录\n  const userInfo = uni.getStorageSync('userInfo')\n  const basicUserInfo = userInfo ? {\n    nickname: userInfo.nickname,\n    avatarUrl: userInfo.avatarUrl\n  } : null\n  \n  // 清除登录状态\n  uni.removeStorageSync('token')\n  uni.removeStorageSync('userInfo')\n  uni.removeStorageSync('agreed')\n  \n  // 保存基本信息用于下次登录\n  if (basicUserInfo && basicUserInfo.nickname && basicUserInfo.avatarUrl) {\n    uni.setStorageSync('basicUserInfo', basicUserInfo)\n  }\n  \n  // 跳转到登录页\n  uni.reLaunch({\n    url: '/pages/login/login'\n  })\n}\n\n// 更新用户信息\nexport const updateUserInfo = async (userInfo) => {\n  try {\n    const result = await api.updateProfile(userInfo)\n    \n    // 更新本地存储\n    const currentUserInfo = uni.getStorageSync('userInfo')\n    uni.setStorageSync('userInfo', { ...currentUserInfo, ...result })\n    \n    return result\n  } catch (error) {\n    console.error('更新用户信息失败:', error)\n    throw error\n  }\n}\n\n// 获取用户设置\nexport const getUserSettings = async () => {\n  try {\n    return await api.getSettings()\n  } catch (error) {\n    console.error('获取用户设置失败:', error)\n    throw error\n  }\n}\n\n// 更新用户设置\nexport const updateUserSettings = async (settings) => {\n  try {\n    return await api.updateSettings(settings)\n  } catch (error) {\n    console.error('更新用户设置失败:', error)\n    throw error\n  }\n}\n"],"names":["uni"],"mappings":";;AAIY,MAAC,aAAa,MAAM;AAC9B,QAAM,QAAQA,cAAAA,MAAI,eAAe,OAAO;AACxC,QAAM,WAAWA,cAAAA,MAAI,eAAe,UAAU;AAE9C,SAAO;AAAA,IACL,YAAY,CAAC,CAAC;AAAA,IACd;AAAA,IACA;AAAA,EACD;AACH;AAGY,MAAC,eAAe,CAAC,UAAU;AACrC,MAAI,CAAC,SAAS,OAAO,UAAU;AAAU,WAAO;AAChD,QAAM,QAAQ,MAAM,MAAM,GAAG;AAC7B,MAAI,MAAM,WAAW;AAAG,WAAO;AAC/B,MAAI;AACF,UAAM,UAAU,KAAK,MAAM,mBAAmB,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,QAAI,CAAC,WAAW,CAAC,QAAQ;AAAK,aAAO;AACrC,UAAM,SAAS,KAAK,MAAM,KAAK,IAAK,IAAG,GAAI;AAE3C,WAAO,QAAQ,MAAO,SAAS;AAAA,EAChC,SAAQ,IAAI;AACX,WAAO;AAAA,EACR;AACH;AA2IY,MAAC,SAAS,MAAM;AAE1B,QAAM,WAAWA,cAAAA,MAAI,eAAe,UAAU;AAC9C,QAAM,gBAAgB,WAAW;AAAA,IAC/B,UAAU,SAAS;AAAA,IACnB,WAAW,SAAS;AAAA,EACxB,IAAM;AAGJA,gBAAG,MAAC,kBAAkB,OAAO;AAC7BA,gBAAG,MAAC,kBAAkB,UAAU;AAChCA,gBAAG,MAAC,kBAAkB,QAAQ;AAG9B,MAAI,iBAAiB,cAAc,YAAY,cAAc,WAAW;AACtEA,wBAAI,eAAe,iBAAiB,aAAa;AAAA,EAClD;AAGDA,gBAAAA,MAAI,SAAS;AAAA,IACX,KAAK;AAAA,EACT,CAAG;AACH;;;;"}