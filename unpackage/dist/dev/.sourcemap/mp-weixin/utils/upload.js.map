{"version":3,"file":"upload.js","sources":["utils/upload.js"],"sourcesContent":["import { api } from './api.js'\r\n\r\n/**\r\n * 压缩图片\r\n * @param {string} filePath 图片路径\r\n * @param {number} quality 压缩质量 0-1\r\n * @returns {Promise<string>} 压缩后的图片路径\r\n */\r\nexport function compressImage(filePath, quality = 0.8) {\r\n  return new Promise((resolve, reject) => {\r\n    uni.compressImage({\r\n      src: filePath,\r\n      quality: Math.floor(quality * 100),\r\n      success: (res) => {\r\n        resolve(res.tempFilePath)\r\n      },\r\n      fail: (error) => {\r\n        console.error('图片压缩失败:', error)\r\n        reject(error)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * 上传单张图片\r\n * @param {string} filePath 图片路径\r\n * @param {string} type 图片类型 (avatar, gallery, etc.)\r\n * @returns {Promise<string>} 上传后的图片URL\r\n */\r\nexport async function uploadImage(filePath, type = 'gallery') {\r\n  try {\r\n    // 开发环境：直接返回本地文件路径作为URL\r\n    // 生产环境：需要集成真实的对象存储服务\r\n    console.log('开发环境：使用本地文件路径作为图片URL')\r\n    return filePath\r\n    \r\n    // 生产环境代码（需要配置对象存储）：\r\n    // 1. 获取上传策略\r\n    // const policyRes = await api.getUploadPolicy(type)\r\n    // const { uploadUrl, formData, key } = policyRes.data\r\n    // \r\n    // 2. 上传到对象存储\r\n    // const uploadRes = await uploadToOSS(filePath, uploadUrl, formData, key)\r\n    // \r\n    // 3. 确认上传完成\r\n    // const completeRes = await api.completeUpload({\r\n    //   url: `${uploadUrl}${key}`,\r\n    //   fileKey: key,\r\n    //   type: type\r\n    // })\r\n    // \r\n    // return completeRes.data.url\r\n  } catch (error) {\r\n    console.error('图片上传失败:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * 批量上传图片\r\n * @param {Array<string>} filePaths 图片路径数组\r\n * @param {string} type 图片类型\r\n * @param {string} petId 宠物ID（可选）\r\n * @returns {Promise<Array<string>>} 上传后的图片URL数组\r\n */\r\nexport async function uploadImages(filePaths, type = 'gallery', petId = null) {\r\n  try {\r\n    uni.showLoading({ title: `上传${filePaths.length}张图片中...` })\r\n    \r\n    // 批量压缩\r\n    const compressedPaths = await Promise.all(\r\n      filePaths.map(filePath => compressImage(filePath, 0.7))\r\n    )\r\n    \r\n    // 批量上传\r\n    const uploadPromises = compressedPaths.map(filePath => uploadImage(filePath, type))\r\n    const urls = await Promise.all(uploadPromises)\r\n    \r\n    // 如果有宠物ID，创建媒体记录\r\n    if (petId && urls.length > 0) {\r\n      try {\r\n        await api.createMedia({\r\n          petId,\r\n          type: 'image',\r\n          urls: urls,\r\n          description: '宠物照片'\r\n        })\r\n      } catch (error) {\r\n        console.warn('创建媒体记录失败:', error)\r\n      }\r\n    }\r\n    \r\n    uni.hideLoading()\r\n    return urls\r\n  } catch (error) {\r\n    uni.hideLoading()\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * 上传到对象存储\r\n * @param {string} filePath 本地文件路径\r\n * @param {string} uploadUrl 上传URL\r\n * @param {Object} formData 表单数据\r\n * @param {string} fileKey 文件key\r\n * @returns {Promise<Object>} 上传结果\r\n */\r\nfunction uploadToOSS(filePath, uploadUrl, formData, fileKey) {\r\n  return new Promise((resolve, reject) => {\r\n    const uploadTask = uni.uploadFile({\r\n      url: uploadUrl,\r\n      filePath: filePath,\r\n      name: 'file',\r\n      formData: {\r\n        ...formData,\r\n        key: fileKey\r\n      },\r\n      success: (res) => {\r\n        if (res.statusCode === 200 || res.statusCode === 204) {\r\n          resolve(res)\r\n        } else {\r\n          reject(new Error(`上传失败: ${res.statusCode}`))\r\n        }\r\n      },\r\n      fail: (error) => {\r\n        reject(error)\r\n      }\r\n    })\r\n    \r\n    // 监听上传进度\r\n    uploadTask.onProgressUpdate((res) => {\r\n      console.log('上传进度:', res.progress + '%')\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * 选择并上传头像\r\n * @returns {Promise<string>} 上传后的头像URL\r\n */\r\nexport async function pickAndUploadAvatar() {\r\n  try {\r\n    const res = await uni.chooseImage({\r\n      count: 1,\r\n      sizeType: ['compressed'],\r\n      sourceType: ['album', 'camera']\r\n    })\r\n    \r\n    const filePath = res.tempFilePaths[0]\r\n    \r\n    // 压缩图片\r\n    const compressedPath = await compressImage(filePath, 0.8)\r\n    \r\n    // 显示上传进度\r\n    uni.showLoading({ title: '上传头像中...' })\r\n    \r\n    // 上传头像\r\n    const avatarUrl = await uploadImage(compressedPath, 'avatar')\r\n    \r\n    uni.hideLoading()\r\n    uni.showToast({ title: '头像上传成功', icon: 'success' })\r\n    \r\n    return avatarUrl\r\n  } catch (error) {\r\n    uni.hideLoading()\r\n    console.error('选择头像失败:', error)\r\n    uni.showToast({ title: '头像上传失败', icon: 'none' })\r\n    throw error\r\n  }\r\n}\r\n\r\n/**\r\n * 选择并上传照片\r\n * @param {number} maxCount 最大选择数量\r\n * @returns {Promise<Array<string>>} 上传后的照片URL数组\r\n */\r\nexport async function pickAndUploadPhotos(maxCount = 9) {\r\n  try {\r\n    const res = await uni.chooseImage({\r\n      count: maxCount,\r\n      sizeType: ['compressed'],\r\n      sourceType: ['album', 'camera']\r\n    })\r\n    \r\n    const filePaths = res.tempFilePaths\r\n    \r\n    // 显示上传进度\r\n    uni.showLoading({ title: `上传${filePaths.length}张照片中...` })\r\n    \r\n    // 批量上传\r\n    const urls = await uploadImages(filePaths, 'gallery')\r\n    \r\n    uni.hideLoading()\r\n    uni.showToast({ title: `成功上传${urls.length}张照片`, icon: 'success' })\r\n    \r\n    return urls\r\n  } catch (error) {\r\n    uni.hideLoading()\r\n    console.error('选择照片失败:', error)\r\n    uni.showToast({ title: '照片上传失败', icon: 'none' })\r\n    throw error\r\n  }\r\n}\r\n"],"names":["uni"],"mappings":";;AAQO,SAAS,cAAc,UAAU,UAAU,KAAK;AACrD,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtCA,kBAAAA,MAAI,cAAc;AAAA,MAChB,KAAK;AAAA,MACL,SAAS,KAAK,MAAM,UAAU,GAAG;AAAA,MACjC,SAAS,CAAC,QAAQ;AAChB,gBAAQ,IAAI,YAAY;AAAA,MACzB;AAAA,MACD,MAAM,CAAC,UAAU;AACfA,sBAAAA,MAAA,MAAA,SAAA,yBAAc,WAAW,KAAK;AAC9B,eAAO,KAAK;AAAA,MACb;AAAA,IACP,CAAK;AAAA,EACL,CAAG;AACH;AAQO,eAAe,YAAY,UAAU,OAAO,WAAW;AAC5D,MAAI;AAGFA,kBAAAA,MAAY,MAAA,OAAA,yBAAA,sBAAsB;AAClC,WAAO;AAAA,EAkBR,SAAQ,OAAO;AACdA,kBAAAA,MAAA,MAAA,SAAA,yBAAc,WAAW,KAAK;AAC9B,UAAM;AAAA,EACP;AACH;;;"}