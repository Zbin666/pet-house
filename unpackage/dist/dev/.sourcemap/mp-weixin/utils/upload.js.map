{"version":3,"file":"upload.js","sources":["utils/upload.js"],"sourcesContent":["import { api } from './api.js'\n\n/**\n * 压缩图片\n * @param {string} filePath 图片路径\n * @param {number} quality 压缩质量 0-1\n * @returns {Promise<string>} 压缩后的图片路径\n */\nexport function compressImage(filePath, quality = 0.8) {\n  return new Promise((resolve, reject) => {\n    uni.compressImage({\n      src: filePath,\n      quality: Math.floor(quality * 100),\n      success: (res) => {\n        resolve(res.tempFilePath)\n      },\n      fail: (error) => {\n        console.error('图片压缩失败:', error)\n        reject(error)\n      }\n    })\n  })\n}\n\n/**\n * 上传单张图片\n * @param {string} filePath 图片路径\n * @param {string} type 图片类型 (avatar, gallery, etc.)\n * @returns {Promise<string>} 上传后的图片URL\n */\nexport async function uploadImage(filePath, type = 'gallery') {\n  try {\n    console.log('=== 前端图片上传调试信息 ===');\n    console.log('文件路径:', filePath);\n    console.log('上传类型:', type);\n    console.log('上传URL:', 'http://10.161.196.67:3000/api/media/upload');\n    console.log('Token:', uni.getStorageSync('token'));\n    \n    // 上传到后端服务器\n    const uploadTask = uni.uploadFile({\n      url: 'http://10.161.196.67:3000/api/media/upload',\n      filePath: filePath,\n      name: 'file',\n      formData: {\n        type: type\n      },\n      header: {\n        'Authorization': `Bearer ${uni.getStorageSync('token')}`\n      }\n    })\n    \n    return new Promise((resolve, reject) => {\n      uploadTask.then((res) => {\n        console.log('📤 上传响应:');\n        console.log('- 状态码:', res.statusCode);\n        console.log('- 响应头:', res.header);\n        console.log('- 响应数据:', res.data);\n        \n        if (res.statusCode === 200) {\n          const data = JSON.parse(res.data)\n          console.log('📋 解析后的数据:', data);\n          \n          if (data.success) {\n            // 返回完整的图片URL\n            const imageUrl = `http://10.161.196.67:3000/uploads/${data.filename}`\n            console.log('✅ 图片上传成功:');\n            console.log('- 文件名:', data.filename);\n            console.log('- 相对URL:', data.url);\n            console.log('- 完整URL:', imageUrl);\n            console.log('- 媒体ID:', data.id);\n            \n            // 测试图片URL是否可访问\n            uni.request({\n              url: imageUrl,\n              method: 'HEAD',\n              success: (testRes) => {\n                console.log('🔍 图片URL测试结果:', testRes.statusCode);\n              },\n              fail: (testErr) => {\n                console.error('❌ 图片URL测试失败:', testErr);\n              }\n            });\n            \n            resolve(imageUrl)\n          } else {\n            console.error('❌ 上传失败:', data.message);\n            reject(new Error(data.message || '上传失败'))\n          }\n        } else {\n          console.error('❌ HTTP错误:', res.statusCode);\n          reject(new Error(`上传失败: ${res.statusCode}`))\n        }\n      }).catch((error) => {\n        console.error('❌ 图片上传异常:', error)\n        reject(error)\n      })\n    })\n  } catch (error) {\n    console.error('❌ 图片上传失败:', error)\n    throw error\n  }\n}\n\n/**\n * 批量上传图片\n * @param {Array<string>} filePaths 图片路径数组\n * @param {string} type 图片类型\n * @param {string} petId 宠物ID（可选）\n * @returns {Promise<Array<string>>} 上传后的图片URL数组\n */\nexport async function uploadImages(filePaths, type = 'gallery', petId = null) {\n  try {\n    uni.showLoading({ title: `上传${filePaths.length}张图片中...` })\n    \n    // 批量压缩\n    const compressedPaths = await Promise.all(\n      filePaths.map(filePath => compressImage(filePath, 0.7))\n    )\n    \n    // 批量上传\n    const uploadPromises = compressedPaths.map(filePath => uploadImage(filePath, type))\n    const urls = await Promise.all(uploadPromises)\n    \n    // 如果有宠物ID，创建媒体记录\n    if (petId && urls.length > 0) {\n      try {\n        await api.createMedia({\n          petId,\n          type: 'image',\n          urls: urls,\n          description: '宠物照片'\n        })\n      } catch (error) {\n        console.warn('创建媒体记录失败:', error)\n      }\n    }\n    \n    uni.hideLoading()\n    return urls\n  } catch (error) {\n    uni.hideLoading()\n    throw error\n  }\n}\n\n/**\n * 上传到对象存储\n * @param {string} filePath 本地文件路径\n * @param {string} uploadUrl 上传URL\n * @param {Object} formData 表单数据\n * @param {string} fileKey 文件key\n * @returns {Promise<Object>} 上传结果\n */\nfunction uploadToOSS(filePath, uploadUrl, formData, fileKey) {\n  return new Promise((resolve, reject) => {\n    const uploadTask = uni.uploadFile({\n      url: uploadUrl,\n      filePath: filePath,\n      name: 'file',\n      formData: {\n        ...formData,\n        key: fileKey\n      },\n      success: (res) => {\n        if (res.statusCode === 200 || res.statusCode === 204) {\n          resolve(res)\n        } else {\n          reject(new Error(`上传失败: ${res.statusCode}`))\n        }\n      },\n      fail: (error) => {\n        reject(error)\n      }\n    })\n    \n    // 监听上传进度\n    uploadTask.onProgressUpdate((res) => {\n      console.log('上传进度:', res.progress + '%')\n    })\n  })\n}\n\n/**\n * 选择并上传头像\n * @returns {Promise<string>} 上传后的头像URL\n */\nexport async function pickAndUploadAvatar() {\n  try {\n    const res = await uni.chooseImage({\n      count: 1,\n      sizeType: ['compressed'],\n      sourceType: ['album', 'camera']\n    })\n    \n    const filePath = res.tempFilePaths[0]\n    \n    // 压缩图片\n    const compressedPath = await compressImage(filePath, 0.8)\n    \n    // 显示上传进度\n    uni.showLoading({ title: '上传头像中...' })\n    \n    // 上传头像\n    const avatarUrl = await uploadImage(compressedPath, 'avatar')\n    \n    uni.hideLoading()\n    uni.showToast({ title: '头像上传成功', icon: 'success' })\n    \n    return avatarUrl\n  } catch (error) {\n    uni.hideLoading()\n    console.error('选择头像失败:', error)\n    uni.showToast({ title: '头像上传失败', icon: 'none' })\n    throw error\n  }\n}\n\n/**\n * 选择并上传照片\n * @param {number} maxCount 最大选择数量\n * @returns {Promise<Array<string>>} 上传后的照片URL数组\n */\nexport async function pickAndUploadPhotos(maxCount = 9) {\n  try {\n    const res = await uni.chooseImage({\n      count: maxCount,\n      sizeType: ['compressed'],\n      sourceType: ['album', 'camera']\n    })\n    \n    const filePaths = res.tempFilePaths\n    \n    // 显示上传进度\n    uni.showLoading({ title: `上传${filePaths.length}张照片中...` })\n    \n    // 批量上传\n    const urls = await uploadImages(filePaths, 'gallery')\n    \n    uni.hideLoading()\n    uni.showToast({ title: `成功上传${urls.length}张照片`, icon: 'success' })\n    \n    return urls\n  } catch (error) {\n    uni.hideLoading()\n    console.error('选择照片失败:', error)\n    uni.showToast({ title: '照片上传失败', icon: 'none' })\n    throw error\n  }\n}\n"],"names":["uni","api"],"mappings":"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"}